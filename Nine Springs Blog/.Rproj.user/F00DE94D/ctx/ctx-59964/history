# values in the range
if(scan$hits == 0 & range > 2){
for(x in 1:nrow(bands)){
if(start %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
not_possible <- not_possible[-1]
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & range > 2){
for(x in 1:nrow(bands)){
if(start %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
not_possible
start
bands[x,]
start %in% bands[18,]
start+end
(start+end)%%18
sky[start]
sky[end]
sky[start] - sky[end]
sky[start-end]
sky[(start)%%18+1]
sky[(start)%%18]
sky[start%%18]
(start+end)
start
start <- 1
scan <- data.frame(start, end, hits)
range <- sky[(start+end)%%18+1]
start+end
(start+end)%%18
(start+end)%%18
range <- sky[(start+end)%%18]
start <- 18
end <- 3
hits <- 0
scan <- data.frame(start, end, hits)
range <- sky[(start+end)%%18]
start <- 1
scan <- data.frame(start, end, hits)
range <- sky[(start+end)%%18]
start+end
range <- sky[(start+end)]
(start+end)
range <- sky[(end-start)]
range <- sky[(end-start)]
range <- sky[(end-start)]
sky[(end-start)]
(end-start)
start <- 18
range <- sky[(end-start)]
end-start
range <- sky[(end-start)%%18]
(end-start)%%18
range <- (end-start)%%18
(end-start)%%18
(end-start
)
if(end-start < 0){
range <- (end-start)*-1
}
range <- range%%18
sky[start]
sky[end]
which(sky[start])
which(x = sky[start])
which(x = sky = start)
which(x = sky == start)
which(x = sky == end)
sky[start]
(sky[start] + sky[end])%%18
sky[start] + sky[end]
(sky[start] + sky[end])%%18 +1
start <- 1
end <- 3
hits <- 0
scan <- data.frame(start, end, hits)
(sky[start] + sky[end])%%18 +1
sky[start] + sky[end]
(sky[start] + sky[end])%%18
(sky[start] + sky[end] -1 )%%18
start <- 18
end <- 3
hits <- 0
scan <- data.frame(start, end, hits)
(sky[start] + sky[end] -1 )%%18
sky[start] + sky[end] -1
sky[start+end]
(sky[(start+end)%%18]
sky[(start+end)%%18]
sky[(start+end)%%18]
(start+end)
sky[(start+end+1)%%18]
start <- 1
sky[(start+end+1)%%18]
sky[(start+end+1)%%18]
sky[(start+end)%%18]
sky[(end-start)%%18]
(end-start)%%18
sky[end-start]
sky[end-start]
sky[end-start] %% 18
start <- 18
sky[end-start] %% 18
sky[end-start]
end-start
sky[end-start]
sky[-15]
abs(end-start
)
sky[abs(end-start)] %% 18
sky[18] + 1
(sky[18] + 1)%%18
(sky[start] + 1) %% 18
(sky[start] + sky[end]) %% 18
start <- 1
(sky[start] + sky[end]) %% 18
sky[start]
sky[end]
(sky[end-start]) %% 18
start <- 18
(sky[end-start]) %% 18
end-start%% 18
(end-start)%% 18
start <- 1
range <- (end-start)%% 18
start <- 18
end-start <0
range <- end-start
start:end
sky[start:end]
sky[start]
sky[start]:sky[end]
which(sky == start)
View(bands)
bands <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
bands %<>%  rbind(values = c(shift(v = sky, places = x, dir="right"))[1:18])
}
colnames(bands) <- paste0("P", 1:18)
bands[,P1] == start
bands[,"P1"] == start
bands[bands[,"P1"] == start]
bands[bands[,"P1"] == start]
[bands[,"P1"] == start
bands[,"P1"] == start
bands[which(bands[,"P1"] == start)]
which(bands[,"P1"] == start)
bands[,which(bands[,"P1"] == start)]
bands[which(bands[,"P1"] == start),"P1"]
which(bands[,"P1"] == start)
bands[which(bands[,"P1"] == start),"P1"]
start
which(bands[,"P1"] == start)
bands[which(bands[,"P1"] == start),]
which(bands[,"P1"] == start)
bands[which(bands[,"P1"] == start),1:3]
bands[which(bands[,"P1"] == start),1:end]
bands[,"P1"] == end
bands[which(bands[,1] == start),1]
which(bands[,1] == start
)
bands[which(bands[,1] == start:end),1]
which(bands[,1]==end)
which(bands[,1] == start)
col <- bands[row,end]
row
row <- which(bands[,1] == start)
col <- bands[row,end]
end
col <- bands[row,which(bands[row,]==end)]
row
bands[row,]
end
which(bands[row,]==end)
col <- bands[row,which(bands[row,]==end)]
which(bands[row,]==end)
range <- bands[which(bands[,1] == start),which(bands[row,]==end)]
which(bands[row,]==end)
range <-which(bands[bands[,1] == start,]==end)
range <- which(bands[bands[,1] == start]==end)
range <- which(bands[bands[,1] == start,]==end)
scan <- data.frame(start, end, range, hits)
scan <- data.frame(start, end, range, hits)
scan$hits == 0
scan$range > 2
nrow(bands)
scan$start
bands[x,]
x<-``
x<-1
bands[x,]
scan$start
scan$start %in% bands[x,]
not_possible %<>% append(x)
not_possible <- NA
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
if(scan$start %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
not_possible <- not_possible[-1]
not_possible
sky <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
sky %<>%  rbind(values = c(shift(v = 1:18, places = x, dir="right"))[1:18])
}
colnames(bands) <- paste0("P", 1:18)
View(sky)
colnames(bands) <- paste0("P", 1:18)
bands <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
bands %<>%  rbind(values = c(shift(v = 1:18, places = x, dir="right"))[1:6])
}
colnames(bands) <- paste0("P", 1:6)
start <- 18
end <- 3
hits <- 0
range <- which(sky[sky[,1] == start,]== end)
scan <- data.frame(start, end, range, hits)
not_possible <- NA
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
if(scan$start %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
not_possible <- not_possible[-1]
bands <- bands[-not_possible,]
sky[sky[,1] == start
]
sky[sky[,1] == start,]
sky <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
sky %<>%  rbind(values = c(shift(v = 1:18, places = x, dir="right"))[1:18])
}
colnames(bands) <- paste0("P", 1:18)
sky <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
sky %<>%  rbind(values = c(shift(v = 1:18, places = x, dir="right"))[1:18])
}
colnames(sky) <- paste0("P", 1:18)
bands <- data.frame(stringsAsFactors = FALSE)
for(x in 1:18){
bands %<>%  rbind(values = c(shift(v = 1:18, places = x, dir="right"))[1:6])
}
colnames(bands) <- paste0("P", 1:6)
start <- 18
end <- 3
hits <- 0
range <- which(sky[sky[,1] == start,]== end)
sky[sky[,1] == start,]
sky[sky[,1] == start,1]
v_in_range <- sky[sky[,1] == start,1:range]
v_in_range %in% bands[x,]
x <- 1
v_in_range %in% bands[x,]
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
if(v_in_range %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
v_in_range
bands[x,]
bands[x,]
1:nrow(bands
)
v_in_range
y <- 18
y %in% bands[x,]
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
for(y in v_in_range){
if(y %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
}
not_possible <- NA
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
for(y in v_in_range){
if(y %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
}
not_possible <- not_possible[-1]
not_possible
unique(not_possible)
bands <- bands[-unique(not_possible),]
View(bands)
rownames(bands) <- 1:nrow(bands)
start <- 1
end <- 3
hits <- 0
range <- which(sky[sky[,1] == start,]== end)
start <- 2
end <- 3
hits <- 0
range <- which(sky[sky[,1] == start,]== end)
v_in_range <- sky[sky[,1] == start,1:range]
scan <- data.frame(start, end, range, v_in_range, hits)
not_possible <- NA
scan$range > 2
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
for(y in v_in_range){
if(y %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
}
not_possible <- not_possible[-1]
bands <- bands[-unique(not_possible),]
rownames(bands) <- 1:nrow(bands)
# If no hits and range >2, remove all possibilities that contain
# values in the range
if(scan$hits == 0 & scan$range > 2){
for(x in 1:nrow(bands)){
for(y in v_in_range){
if(y %in% bands[x,]){
not_possible %<>% append(x)
}
}
}
not_possible <- not_possible[-1]
bands <- bands[-unique(not_possible),]
rownames(bands) <- 1:nrow(bands)
}
setwd("C:\\Documents\\Courtney R")
# with the same letter sum whose lengths differ by 11 letters.
#
#  5. cytotoxicity and unreservedness have the same letter sum as each other
# (188), and they have no letters in common. Find a pair of words that have no
# letters in common, and that have the same letter sum, which is larger than
# 188. (There are two such pairs, and one word appears in both pairs.)
#
# 6. The list of word { geographically, eavesdropper, woodworker, oxymorons }
# contains 4 words. Each word in the list has both a different number of letters, and a different letter sum. The list is sorted both in descending order of word length, and ascending order of letter sum. What's the longest such list you can find?
### Basic Function -----
word <- "excellent"
[[:letters:]]
[:letters:]
LETTERS
values <- 1:26
key <- setNames(as.list(LETTERS), values)
key <- setNames(as.list(LETTERS), 1:26)
key("a")
key["a"]
key["A"]
key[1]
key <- setNames(1:26, LETTERS)
key["A"]
??read_sf
?read_sf
sf::read_sf
load.packages(df)
install.packages("sf")
sf::read_sf("C:\Users\RoboGadget MkII\OneDrive\GeoSpatial\Dane_County_Park_System.kml", stringsAsFactors = FALSE)
sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml",
stringsAsFactors = FALSE)
install.packages("tibble")
sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml",
stringsAsFactors = FALSE)
parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml",
stringsAsFactors = FALSE)
View(parks)
dane_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml",
stringsAsFactors = FALSE)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks.kml",
stringsAsFactors = FALSE)
View(parks)
View(mad_parks)
sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks.kml",
stringsAsFactors = FALSE)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks.kml",
stringsAsFactors = FALSE, as_tibble = FALSE)
View(mad_parks)
View(mad_parks[[3]][[1]])
mad_parks[[3]][[1]][[1]][[1]]
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks.kml",
stringsAsFactors = FALSE)
mad_parks[[3]][[1]][[1]][[1]]
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks/Parks.shp")
View(mad_parks)
View(dane_parks)
dane_parks %>% select(-Description)
library(magrittr)
dane_parks %>% select(-Description)
library(dplyr)
dane_parks %>% select(-Description)
dane_parks %>% dplyr::select(-Description)
library("dplyr")
install.packages("dplyr")
library("dplyr")
library(dplyr)
dane_parks %>% dplyr::select(-Description)
dane_parks %<>% dplyr::select(-Description)
library(magrittr)
View(mad_parks)
mad_parks %<>% dplyr::select(Park_name, geometry)
mad_parks %<>% dplyr::select(Park_Name, geometry)
View(dane_parks)
View(mad_parks)
mad_parks %<>% dplyr::select(Park_Name, geometry) %>% dplyr::recode("Park_Name" = "Name")
View(mad_parks)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks/Parks.shp") %>%
dplyr::select(Park_Name, geometry) %>% dplyr::recode("Park_Name" = "Name")
View(mad_parks)
dane_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml") %>%
dplyr::select(-Description)
View(dane_parks)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks/Parks.shp") %>%
dplyr::select(Park_Name, geometry) %>% dplyr::recode("Park_Name" = "Name")
?recode
colnames(mad_parks) %<>% dplyr::recode("Park_Name" = "Name")
View(mad_parks)
parks <- row.bind(dane_parks, mad_parks)
? row bind
?? row bind
??row bind
??rowbind
??row.bind
parks <- rbind(dane_parks, mad_parks)
View(parks)
unbind(dane_parks, mad_parks)
rm(dane_parks, mad_parks)
rm(parks)
library(dplyr)
library(magrittr)
dane_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml") %>%
dplyr::select(-Description)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks/Parks.shp") %>%
dplyr::select(Park_Name, geometry)
colnames(mad_parks) %<>% dplyr::recode("Park_Name" = "Name")
parks <- rbind(dane_parks, mad_parks)
rm(dane_parks, mad_parks)
ggplot + sf::geom_sf(data = parks)
ggplot() + sf::geom_sf(data = parks)
??ggplot
sf::ggplot() + sf::geom_sf(data = parks)
install.packages("tidyverse")
ggplot() + sf::geom_sf(data = parks)
library(ggplot2)
ggplot() + sf::geom_sf(data = parks)
ggplot() + geom_sf(data = parks)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat.csv")
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv")
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv", header = TRUE)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv", header = TRUE, sep = ",")
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv",
header = TRUE, sep = ",", nrows = 10)
View(iNat)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv",
header = TRUE, sep = ".", nrows = 10)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv",
header = TRUE, sep = " ", nrows = 10)
View(iNat)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv",
header = TRUE, sep = "\t", nrows = 10)
View(iNat)
library(dplyr)
library(magrittr)
library(ggplot2)
dane_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/Dane_County_Park_System.kml") %>%
dplyr::select(-Description)
mad_parks <- sf::read_sf("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/MadisonParks/Parks.shp") %>%
dplyr::select(Park_Name, geometry)
colnames(mad_parks) %<>% dplyr::recode("Park_Name" = "Name")
parks <- rbind(dane_parks, mad_parks)
rm(dane_parks, mad_parks)
iNat <- read.csv("C:/Users/RoboGadget MkII/OneDrive/GeoSpatial/iNat/iNat.csv",
header = TRUE, sep = "\t", nrows = 10)
ggplot() + geom_sf(data = parks)
setwd("C:/Users/RoboGadget MkII/OneDrive/R Personal/RProgramming/Nine Springs Blog")
quarto publish
1 + 1
library(quarto)
install.packages("quarto")
quarto publish
quarto::publish
quarto::quarto_render()
devtools::install_github("andrie/gcalendr")
install.packages("devtools")
